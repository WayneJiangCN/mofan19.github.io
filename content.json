{"pages":[],"posts":[{"title":"Verilong-有限状态机","text":"状态机​ 状态机全称是有限状态机，是一种在有限个状 态之间按一定规律转换的时序电路，可以认为是组合逻辑和时序逻辑的一种组合，使得整个流程看起来同时易懂。 ​ 根据状态机的输出是否与输入条件相关，可将状态机分为两大类，即摩尔(Moore)型状态 机和米勒(Mealy)型状态机。 ​ Mealy状态机：组合逻辑的输出不仅取决于当前状态，还取决于输入状态。 ​ Moore状态机：组合逻辑的输出只取决于当前状态。 ​ Mealy状态机 F是当前状态和输入信号的函数 状态寄存器是用来记忆状态机当前所处的状态，状态的改变只发生在时钟的跳边沿 G提供状态机的输出，是当前状态和输入信号的函数。 Moore状态机 区别：米勒状态机 的输出由当前状态和输入条件决定的，而摩尔状态机的输出只取决于当前状态。 三段式状态机​ 根据状态机的实际写法，状态机还可以分为一段式、二段式和三段式状态机。 ​ 实际应用中三段式状态机使用最多，因为三段式状态机将组合逻辑和时序分开，有利于综 合器分析优化以及程序的维护；并且三段式状态机将状态转移与状态输出分开，使代码看上去 更加清晰易懂，提高了代码的可读性。 ​ 三段式状态机的基本格式是： ​ 第一个always语句实现同步时序描述状态跳转； ​ 第二个always语句采用组合逻辑判断状态转移条件； ​ 第三个always语句描述状态输出(可以用组合电路输出，也可以时序电路输出)。 （输出建议使用时序逻辑输出，可以有效地滤去组合逻辑输出的毛刺，也可以更好的进行时序计算与约束） 下面以一个7分频为例（对于分频等较简单的功能，可以不使用状态机，这里只是演示状态机 编写的方法），状态跳转图如下图所示: 1234567891011121314151617181920212223242526272829303132//状态机的第一段采用同步时序描述状态转移 always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) curr_st &lt;= S0; else curr_st &lt;= next_st;//状态机的第二段采用组合逻辑判断状态转移条件 always @(*) begin case (curr_st) S0: next_st = S1; S1: next_st = S2; S2: next_st = S3; S3: next_st = S4; S4: next_st = S5; S5: next_st = S6; S6: next_st = S0; default: next_st = S0; endcase end //状态机的第三段描述状态输出（这里采用时序电路输出） always @(posedge sys_clk or negedge sys_rst_n) begin if (!sys_rst_n) clk_divide_7 &lt;= 1'b0; else if ((curr_st == S0) | (curr_st == S1) | (curr_st == S2) | (curr_st == )) clk_divide_7 &lt;= 1'b0; else if ((curr_st == S4) | (curr_st == S5) | (curr_st == S6)) clk_divide_7 &lt;= 1'b1; else ; end ​ 从代码中可以看出，输出的分频时钟clk_divide_7只与当前状态（curr_st）有关，而与 输入状态无关，所以属于摩尔型状态机。状态机的第一段对应摩尔状态机模型的状态寄存器， 用来记忆状态机当前所处的状态；状态机的第二段对应摩尔状态机模型产生下一状态的组合逻 辑F；状态机的第三段对应摩尔状态机产生输出的组合逻辑G，因为采用时序电路输出有很大的 优势，所以这里第三段状态机是由时序电路输出的。","link":"/2022/02/01/Verilong-%E6%9C%89%E9%99%90%E7%8A%B6%E6%80%81%E6%9C%BA/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2022/01/31/hello-world/"}],"tags":[{"name":"Verilog","slug":"Verilog","link":"/tags/Verilog/"}],"categories":[]}